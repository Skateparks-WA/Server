'use strict';

const ParkModel = require('./Schemas.js');

const axios = require('axios');

const skateParks = {};

skateParks.getAllParks = async (request, response) => {
  const parks = await ParkModel.find({});
  response.status(200).json(parks);
};

skateParks.createPark = async (request, response) => {
  const park = new ParkModel(request.body);
  await park.save();
  response.status(200).json(park);
};

const parkArray = [
  '46.9673768,-123.7906958',
  '48.5036754,-122.6095971',
  '48.1644485,-122.1502036',
  '47.3320401999999,-122.2146019',
  '47.638247,-122.5490859',
  '45.7811701,-122.5272706',
  '47.6193600999999,-122.1277674',
  '47.6255309,-122.1505543',
  '47.6255309,-122.1505543',
  '47.556415,-122.1122285',
  '48.7468519,-122.4554763',
  '48.8035581,-122.4948624',
  '45.7169594999999,-121.4703444',
  '47.3118801,-122.005188',
  '47.1915309,-122.1658721',
  '47.1350172,-122.1760516',
  '47.5785209999999,-122.61992',
  '47.7919262,-122.2667177',
  '47.1597498,-122.0324035',
  '47.4737401999999,-122.3400387',
  '48.4699594999999,-122.314274',
  '47.6444714,-121.9108712',
  '47.5231456,-120.464273',
  '46.2677,-122.9106724',
  '46.7251093,-122.9709217',
  '47.844002,-120.0238684',
  '46.4108883,-117.0403093',
  '47.1973109,-120.9499456',
  '47.3760306,-122.1226455',
  '48.3370999,-117.2948709',
  '48.865657,-121.9292234',
  '47.4058589,-122.319947',
  '47.7219864,-121.9570219',
  '47.4144246,-120.2704238',
  '47.4144246,-120.2704238',
  '46.8630001999999,-122.265201',
  '47.8126040999999,-122.3744773',
  '46.9934007,-120.5471621',
  '47.2088091,-121.9907587',
  '47.3126281,-119.5546737',
  '47.9166033,-122.2564983',
  '48.0041038,-122.1926927',
  '47.3219886,-122.300474',
  '47.9559345,-124.3850013',
  '48.0800291,-121.9702742',
  '46.9811483,-123.9130531',
  '47.5402502,-122.0589297',
  '46.1495918,-122.8978834',
  '47.7615343,-122.2496089',
  '46.2004704,-119.1224997',
  '47.3830851,-122.2423164',
  '47.3861779,-122.187305',
  '47.3685246,-122.2815402',
  '48.6118628,-118.0565485',
  '47.6769378,-122.1998206',
  '45.8624496,-122.6604618',
  '48.3968859,-122.4903534',
  '47.7179894999999,-122.2994898',
  '47.977127,-122.126541',
  '47.5880711,-120.668176',
  '47.5880711,-120.668176',
  '46.1327722,-122.9566448',
  '45.6952836,-121.2868082',
  '47.8302512,-122.3331547',
  '47.8638097,-122.2379573',
  '47.3804753,-122.0473424',
  '47.357397,-122.0230446',
  '48.0589464,-122.1744249',
  '47.5810372,-122.2349242',
  '47.872215,-122.217965',
  '47.2506475,-122.3045923',
  '47.8625097,-122.0095519',
  '47.1272269,-119.2820777',
  '47.2503955,-122.1132049',
  '47.9017817,-122.2957294',
  '46.5765825,-122.912442',
  '47.4905408,-121.7775309',
  '48.2961839,-122.648828',
  '47.0443981,-122.941456',
  '48.7029844,-122.8987513',
  '46.8302535,-119.1600672',
  '48.111182,-123.4206235',
  '47.5194191999999,-122.6178789',
  '48.1174399,-122.7531934',
  '46.1986073,-119.7759829',
  '47.20208,-122.2979733',
  '47.6766605,-122.1255657',
  '47.4814541999999,-122.1998364',
  '47.4726085,-122.2426793',
  '46.284245,-119.2811384',
  '47.5267933,-122.3238097',
  '47.601416,-122.0368455',
  '47.4364154,-122.2758607',
  '47.4802984,-122.3038972',
  '47.6706355,-122.3855052',
  '47.5697629999999,-122.3084654',
  '47.5190676,-122.2841413',
  '47.696852,-122.3731015',
  '47.6852674,-122.2993101',
  '47.5648549999999,-122.3640218',
  '47.5918752,-122.3041394',
  '47.6677642,-122.3400679',
  '47.5730909,-122.349732',
  '47.7098083,-122.3232191',
  '47.5208196,-122.3690794',
  '48.5088316,-122.2390451',
  '47.7412693,-122.3195652',
  '47.9138712,-122.0861026',
  '47.532368,-121.8718781',
  '47.3909406999999,-119.4835773',
  '47.1224732,-122.4385416',
  '47.712788,-117.367605',
  '48.0802834,-123.0860968',
  '47.8623634,-121.8135623',
  '47.2060882,-122.2269436',
  '47.2547541,-122.4302851',
  '47.2708279999999,-122.5088887',
  '47.2996717,-122.4045338',
  '47.206326,-122.4237874',
  '47.2598513,-122.4383662',
  '48.7041076999999,-119.4456644',
  '47.4910151,-122.2785589',
  '48.05618,-122.272401',
  '46.5703806,-120.4778152',
  '47.2131745,-122.534406',
  '45.636836,-122.645549',
  '45.6331399,-122.5030706',
  '47.400795,-122.4688677',
  '46.0465033,-118.3587247',
  '46.0743038,-118.2850441',
  '47.4229503,-120.3062318',
  '47.4118047,-120.3189062',
  '47.1075145999999,-122.0479974',
  '47.4232005,-119.1208498',
  '46.494509,-122.9420382',
  '47.7693526,-122.1582472',
  '45.9026898,-122.7421533',
  '46.6179274,-120.5620786',
  '46.5994478,-120.488026',
  '46.9413987999999,-122.6074968'
];

skateParks.daniel = async (request, response) => {
  console.log('here');

  const sleep = (milliseconds) => {
    return new Promise((resolve) => setTimeout(resolve, milliseconds));
  };

  for (let i = 0; i < parkArray.length; i++) {
    await sleep(2000).then(async () => {
      const ans = await axios.get(
        `https://native-land.ca/api/index.php?maps=territories&position=${parkArray[i]}`
      );
      console.log(ans.data.map(cur => cur.properties.Name).join(', '));
    });
  }

  console.log('end');
  response.send('yea boy');
};

module.exports = skateParks;
